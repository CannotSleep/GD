<template>
	<view class="content">
		<view class="list-content">
			<view class="uni-list">
				<block v-for="(item,index) in fileDatalist" :key="index">
					<block v-for="(citem,cindex) in item.Detail" :key="cindex">
						<view class="uni-list-cell" hover-class="uni-list-cell-hover">
							<view class="uni-triplex-row">
								<view class="uni-triplex-left">
									<label class="filetext">
										<text class="list-title uni-ellipsis">{{citem.FileName}}</text>
										<text class="list-deadline">{{item.AddUserName}}</text>
										<text class="list-level">{{item.AddTime}}</text>
										<text class="list-state">{{item.Type}}</text>
										<button class="list-button" type="primary" v-if="citem.isDown==0"   :size="mini" @tap="fileDown($event,citem.ID,citem.FileSrc,index,cindex,citem.FileName)" :loading="false" >下载</button>
										<button class="list-button" type="primary" v-if="citem.isDown==1"  :size="mini" @tap="fileOpen(citem.FileName)" :loading="false" :plain="true">打开</button>
									</label>
								</view>
							</view>
						</view>
					</block>
				</block>
				<load-more :loadingType="loadingType" :contentText="contentText"></load-more>
			</view>
		</view>
	</view>
</template>

<script>
	import server from '../../../store/server.js';
	import loadMore from '../../../components/load-more.vue'

	export default {
		data() {
			return {
				fileDatalist: [],
				filePath:"",
				typeI:9,
				page:1,
				loadingType: 0,
				contentText: {
					contentdown: "上拉显示更多",
					contentrefresh: "正在加载...",
					contentnomore: "没有更多数据了"
				}
			}
		},
		onLoad(option) {
			let Type = option.type;
			switch (Type) {
				case '1':
					uni.setNavigationBarTitle({
						title: '我的文件'
					});
					break;
				case '2':
					uni.setNavigationBarTitle({
						title: '与我相关'
					});
					break;
				case '0':
					uni.setNavigationBarTitle({
						title: '共享文件'
					});
					break;
					defualt: break;
			}
			
			this.Token = server.net.GetSessionToken();
			this.typeI = Type;
			this.searchBtn();
		},onPullDownRefresh() {
			this.page=1;
			this.getFilelist(this.typeI);
		},
		components: {
			loadMore
		},
		onReachBottom(){
			if (this.loadingType !== 0) {
				return;
			}
			this.page=this.page+1;
			console.log(this.page)
			this.loadingType = 1;	
			this.getFilelist(this.typeI);
		},
		methods: {
			searchBtn:function(){
				this.page=1;
				this.getFilelist(this.typeI);
			},
			getFilelist(typeIndex) {
				let url = server.net.setUrl('api/FileSystemApi/GetList');
				
				let data = {
					page: this.page,
					operate: typeIndex,
					type: 0,
					userName:"",
					fileName:"" 
				};
				
				uni.request({
					url: url,
					method: 'GET',
					data: data,
					header: {
						token: this.Token
					},
					success: (res) => {
						server.net.showWrongTipsEx(res);
 						let jsondata = res.data;
 						let fileArr=jsondata.data;
						console.log(JSON.stringify(fileArr))
						if (fileArr == '') {
							uni.stopPullDownRefresh();
							uni.showToast({
								title: '暂无数据'
							})
							this.loadingType = 2; 
							return;
						}
						
						for(let f of fileArr){
							//时间
							f.AddTime = f.AddTime.substring(0,10)
							//类型
							switch(f.Type){
								case 1:
									f.Type="安全管理文件";
									break;
								case 2:
									f.Type="质量管理文件";
									break;
								case 3:
									f.Type="工程管理文件";
									break;
								case 4:
									f.Type="其他文件";
									break;
							}
							//名称
							for(let fchild of f.Detail){
								let oNameAttr =  fchild.FileSrc.split("/");
								let oName = oNameAttr[oNameAttr.length-1];
								
								let value = uni.getStorageSync(oName);
								if(value){
									console.log("对比成功")
									fchild.isDown = 1;
								}else{
									console.log("对比失败")
									fchild.isDown = 0;
								}
							
							}
						}
						
						if(fileArr.length<1){
							this.loadingType = 2; 
							return;
						}
						if(this.page==1){
							this.fileDatalist=[];
						}
						
						this.fileDatalist = this.fileDatalist.concat(fileArr);
						this.loadingType = 0; 
						uni.stopPullDownRefresh();
					},
					fail: (f) => {
						
					},
					complete: (c) => {
						
					}
				});
				
			},
			fileDown(e,id,fileSrc,index,cindex,cfilename){
				let url = server.net.setUrl('api/FileSystemApi/DownloadFile');
				uni.showLoading({
					title: '下载中',
					mask:true
				});
			  const downloadTask = 	uni.downloadFile({
					url: url+"?id="+id+"&filePath="+fileSrc, //仅为示例，并非真实的资源
					header:  {
						Token: this.Token, 
					},
					success: (res) => {
						if(res.statusCode != 200)
						{
							uni.showToast({
							title: "下载失败",
							mask: false,
							icon:'none',
							duration: 1500
							});
						}
						if (res.statusCode === 200) {
							console.log('下载成功');
							console.log(res);
							uni.hideLoading();
							//显示打开按钮
							this.fileDatalist[index].Detail[cindex].isDown=1;
							let tempfile = res.tempFilePath;
							//返回的名称
							let oldName = cfilename;
							//保存的名称
							let newAttr = tempfile.split("/");
							let newName = newAttr[newAttr.length-1];
							//计入缓存
							uni.setStorageSync(oldName,newName);
							uni.setStorageSync(newName,oldName);
							console.log(newName)
							console.log(JSON.stringify(res))

						}
					},
					fail:(detail) => {
						console.log("失败"+detail)
						console.log(JSON.stringify(detail))
					},
					complete:(result) => {
						console.log(result)
					}
				});		
				
				downloadTask.onProgressUpdate((res) => {
					console.log('下载进度' + res.progress);
					console.log('已经下载的数据长度' + res.totalBytesWritten);
					console.log('预期需要下载的数据总长度' + res.totalBytesExpectedToWrite);
				});
			},
			fileOpen(fileName){
				let paName = "";
			  let newName =	uni.getStorageSync(fileName)

				uni.openDocument({
					filePath:"_doc/uniapp_temp/download/"+newName,
					success:function(result){
						console.log(JSON.stringify(result))
						console.log("打开成功");
					},
					fail:function(res){
						console.log(JSON.stringify(res))
					}
				})
			}
		}
	}
</script>

<style scoped>
	
	
	
	.input-row {
		align-items: center;
	}

	.list-content {
		margin-top: 0px;
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
		align-items: flex-start;
		width: 100%;
		padding: 0px 10px;
	}

	.list-title {
		font-size: 32px;
		color: #000;
		display: block;
	}

	.list-deadline,
	.list-level,
	.list-state{
		font-size: 26px;
		color: #6C6C6C;
		/* width:30%; */
		margin-right: 6px;
	}
	
	.filetext{
/* 		display: flex;
		flex-direction: row; */
		width: 100%;
	}
	.uni-triplex-left{
			width: 100%;
	}
	
	.list-button{
		font-size: 20px;
		/* color: #6C6C6C; */
		display: inline-block;
		margin-right: 2px;
		float: right;
		/* height: 100%; */
	}
	
	.classdown{
		display:none;
	}
	
</style>
