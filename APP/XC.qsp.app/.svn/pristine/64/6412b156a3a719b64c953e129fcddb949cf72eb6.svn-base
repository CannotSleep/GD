<template>
	<view class="index">
		<scroll-view id="tab-bar" class="swiper-tab" scroll-x :scroll-left="scrollLeft">
			<block v-for="(tab,index) in tabs" :key="tab.id">
				<view :class="['swiper-tab-list',currentTab==index ? 'on' : '']" :id="tab.id" :data-current="index" @tap="swichNav">{{tab.name}}</view>
			</block>
		</scroll-view>
		<swiper :current="currentTab" class="swiper-box" duration="300" @change="bindChange">
			<swiper-item>
				<scroll-view class="index-bd" scroll-y @scrolltolower="loadMore(index1)">
					<view class="content">
						<view class="input-row">
							<view class="input-label">
								<image src="http://xcbucket.oss-cn-beijing.aliyuncs.com/%E6%98%9F%E5%B1%82%E7%8E%B0%E5%9C%BA%E7%AE%A1%E7%90%86APP/img/Site/hnt/list1_icon2-03.png"
								 mode=""></image>
								<text>项目名称:</text>
							</view>
							<input type="text" value="" v-model="projectName" placeholder="请填写项目名称" />
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
								<text>项目编号:</text>
							</view>
							<input type="text" value="" placeholder="请填写项目编号" v-model="projectNum" />
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
								<text>陪同检查人:</text>
							</view>
							<input type="text" value="" placeholder="请选择陪同检查人" v-model="checkPer" />
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-13.png" mode=""></image>
								<text>检查日期:</text>
							</view>
							<picker mode="date" :value="checkDate" start="2018-09-26" end="2028-12-31">
								<view class="uni-input">{{checkDate}}</view>
							</picker>
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
								<text>测量区域:</text>
							</view>
							<picker @change="changeArea" :value="areaIndex" :range="areaList" range-key="text">
								<view class="uni-input">{{areaText}}</view>
							</picker>
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
								<text>构件类别:</text>
							</view>
							<picker @change="changeConstruct" :value="ConstructIndex" :range="ConstructList" range-key="text">
								<view class="uni-input">{{ConstructText}}</view>
							</picker>
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
								<text>主控项目:</text>
							</view>
							<picker @change="changeEngproject" :value="engProjectIndex" :range="engProjectList" range-key="text">
								<view class="uni-input">{{engProjectText}}</view>
							</picker>
						</view>
						<view class="input-row">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-13.png" mode=""></image>
								<text>测量数据:</text>
							</view>
							<view class="data-row">
								<button size="mini" type="default" @tap="addDatas">添加数据</button>
							</view>
						</view>
						<block v-for="(item,index) in dataList" :key="index" v-if="isAdd">
							<view class="input-row" v-if="isAdd">
								<view class="input-label">
									数据:{{item.dataNum}}
								</view>
								<input type="text" v-model="item.dataInput" placeholder="请输入测量数据">

							</view>
						</block>
						<view class="input-row auto-height">
							<view class="input-label">
								<image src="../../../static/img/list1_icon/list1_icon-13.png" mode=""></image>
								<text>备注:</text>
							</view>
							<textarea @blur="bindTextAreaBlur" auto-height placeholder="请填写备注" />
							</view>
							<view class="input-row auto-height">
								<view class="input-label width-100 block">
									<image src="../../../static/img/list1_icon/list1_icon-15.png" mode=""></image>
									<text>上传照片:</text>
								</view>		
								<view class="uni-uploader-body">
									<view class="uni-uploader__files">
										<block v-for="(image,index) in imageList" :key="index">
											<view class="uni-uploader__file">
												<image class="uni-uploader__img" :src="image" :data-src="image" @tap="previewImage"></image>
											</view>
										</block>
									</view>
									<view class="uni-uploader__input-box">
										<view class="uni-uploader__input" @tap="chooseImage"></view>
									</view>
								</view>
							</view>
						</view>
					</scroll-view>
				</swiper-item>
				<swiper-item>
					<scroll-view class="index-bd" scroll-y @scrolltolower="">
						<view class="content">						
							<view class="input-row">
								<view class="input-label">
									<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
									<text>测量区域:</text>
								</view>
								<picker @change="changeArea2" :value="areaIndex2" :range="areaList2" range-key="text">
									<view class="uni-input">{{areaText2}}</view>
								</picker>
							</view>
							<view class="input-row">
								<view class="input-label">
									<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
									<text>构件类别:</text>
								</view>
								<picker @change="changeConstruct2" :value="ConstructIndex2" :range="ConstructList2" range-key="text">
									<view class="uni-input">{{ConstructText2}}</view>
								</picker>
							</view>
							<view class="input-row">
								<view class="input-label">
									<image src="../../../static/img/list1_icon/list1_icon-01.png" mode=""></image>
									<text>主控项目:</text>
								</view>
								<picker @change="changeEngproject2" :value="engProjectIndex2" :range="engProjectList2" range-key="text">
									<view class="uni-input">{{engProjectText2}}</view>
								</picker>
							</view>
							<view class="input-row">
								<view class="input-label">
									<image src="../../../static/img/list1_icon/list1_icon-13.png" mode=""></image>
									<text>测量数据:</text>
								</view>
								<view class="data-row">
									<button size="mini" type="default" @tap="addData()">添加数据</button>
								</view>
							</view>
							<view class="input-row auto-height">
								<view class="input-label">
									<image src="../../../static/img/list1_icon/list1_icon-13.png" mode=""></image>
									<text>备注:</text>
								</view>
								<textarea @blur="bindTextAreaBlur" auto-height placeholder="请填写备注" />
							</view>
							<view class="input-row auto-height">
								<view class="input-label width-100 block">
									<image src="../../../static/img/list1_icon/list1_icon-15.png" mode=""></image>
									<text>上传照片:</text>
								</view>		
								<view class="uni-uploader-body">
									<view class="uni-uploader__files">
										<block v-for="(image,index) in imageList" :key="index">
											<view class="uni-uploader__file">
												<image class="uni-uploader__img" :src="image" :data-src="image" @tap="previewImage"></image>
											</view>
										</block>
									</view>
									<view class="uni-uploader__input-box">
										<view class="uni-uploader__input" @tap="chooseImage"></view>
									</view>
								</view>
							</view>
						</view>
					</scroll-view>
				</swiper-item>
		</swiper>
		<view class="button-row">
			<button type="primary" class="submitBtn" size="mini">提交</button>
			<button type="default" size="mini">暂存</button>
		</view>
	</view> 
</template>
<script>
	import server from '../../../store/server.js';
	export default {
		data() {
			return {
				testToken: '',
				title: 'tabbar',
				scrollLeft: 0, //横向滚动条起始位置
				isClickChange: false,
				currentTab: 0, //判断是否当前点击项
				tabs: [{
					name: '平等度',
					id: 'guanzhu'
				}, {
					name: '垂直度',
					id: 'tuijian'
				}],
				newsitems: [],
				projectName: '',
				projectNum: '',
				checkPer: '',
				checkDate: '请选择检查日期',
				areaVal: '',
				areaList: [],
				areaIndex: 0,
				areaText: '',
				ConstrutVal: '',
				ConstructList: [],
				ConstructIndex: 0,
				ConstructText: '',
				areaVal2: '',
				areaList2: [],
				areaIndex2: 0,
				areaText2: '',
				ConstrutVal2: '',
				ConstructList2: [],
				ConstructIndex2: 0,
				ConstructText2: '',
				engProjectVal: '',
				engProjectList: [],
				engProjectIndex: 0,
				engProjectText: '',
				engProjectVal2: '',
				engProjectList2: [],
				engProjectIndex2: 0,
				engProjectText2: '',
				isAdd: true,
				dataList: [{
					dataNum: 1,
					dataInput:''
				}],
				dataNumList:[{}]
			}
		},
		onLoad: function() {
			//this.newsitems = this.randomfn()
			this.testToken = server.net.getTestToken();
			this.getArea();
			this.getConstruction();
		},
		onUnload: function() {
			this.scrollLeft = 0,
			this.isClickChange = false,
			this.currentTab = 0;
		},
		methods: {
			bindChange: async function(e) { //异步函数
					let index = e.target.current;
					if (this.isClickChange) {
						this.currentTab = index;
						this.isClickChange = false;
						return;
					}
					let tabBar = await this.getWidth("tab-bar"),
						tabBarScrollLeft = tabBar.scrollLeft;

					let width = 0;

					for (let i = 0; i < index; i++) {
						let result = await this.getWidth(this.tabs[i].id);
						width += result.width;
					}

					let winWidth = uni.getSystemInfoSync().windowWidth,
						nowElement = await this.getWidth(this.tabs[index].id),
						nowWidth = nowElement.width;

					if (width + nowWidth - tabBarScrollLeft > winWidth) {
						this.scrollLeft = width + nowWidth - winWidth;
					}
					if (width < tabBarScrollLeft) {
						this.scrollLeft = width;
					}
					this.isClickChange = false;
					this.currentTab = index; //一旦访问data就会出问题
				},
				getWidth: function(id) { //得到元素的宽高
					return new Promise((res, rej) => {
						uni.createSelectorQuery().select("#" + id).fields({
							size: true,
							scrollOffset: true
						}, (data) => {
							if (id === 'tab-bar') {
								console.log("id=", id, "数据:", data)
							}
							res(data);
						}).exec();
					})
				},
				swichNav: async function(e) { //点击tab-bar事件
						if (this.currentTab === e.target.dataset.current) {
							return false;
						} else {
							let tabBar = await this.getWidth("tab-bar"),
								tabBarScrollLeft = tabBar.scrollLeft; //点击的时候记录并设置scrollLeft
							this.scrollLeft = tabBarScrollLeft;
							this.isClickChange = true;
							this.currentTab = e.target.dataset.current
						}
					},
					chooseImage: async function() { //选择图片
							if (this.imageList.length === 9) {
								let isContinue = await this.isFullImg();
								console.log("是否继续?", isContinue);
								if (!isContinue) {
									return;
								}
							}
							uni.chooseImage({ //调用图片选择API
								sourceType: sourceType[this.sourceTypeIndex],
								// #ifdef MP-WEIXIN
								sizeType: sizeType[this.sizeTypeIndex],
								// #endif
								count: this.imageList.length + this.count[this.countIndex] > 9 ? 9 - this.imageList.length : this.count[this
									.countIndex],
								success: (res) => {
									this.imageList = this.imageList.concat(res.tempFilePaths);
								}
							})
						},
						isFullImg: function() { //判断图片最大数量
							return new Promise((res) => {
								uni.showModal({
									content: "已经有9张图片了,是否清空现有图片？",
									success: (e) => {
										if (e.confirm) {
											this.imageList = [];
											res(true);
										} else {
											res(false)
										}
									},
									fail: () => {
										res(false)
									}
								});
							});
						},
						previewImage(e) { //预览图片
							var current = e.target.dataset.src
							uni.previewImage({
								current: current,
								urls: this.imageList
							})
						},
						getArea() {
							//获取测量区域
							console.log(this.testToken);
							let url = server.net.setUrl('api/DropDownListApi/GetActualQuaAreaList');
							let data = {};
							if (this.projectName != '') {
								data.name = this.projectName;
							}
							uni.request({
								url: url,
								method: 'GET',
								header: {
									//token:server.net.GetSessionToken(),
									token: this.testToken
								},
								data: JSON.stringify(data),
								success: (data) => {
									let jsondata = data.data;
									if (jsondata.status = 1) {
										console.log("检查区域获取成功");
										this.areaList = this.setData(jsondata.data);
										this.areaList2 = this.setData(jsondata.data);
										this.areaVal = this.areaList[this.areaIndex].value;
										this.areaText = this.areaList[this.areaIndex].text;
										this.areaVal2 = this.areaList2[this.areaIndex2].value;
										this.areaText2 = this.areaList2[this.areaIndex2].text;
									} else {
										console.log("检查区域获取失败" + jsondata.status);
									}

								},
								fail: (data, code) => {
									console.log("检查区域数据请求失败" + data + code)
								}
							});
						},
						getConstruction() {
							let url = server.net.setUrl('api/DropDownListApi/GetActualQuaComList');
							let data = {};
							if (this.projectName != '') {
								data.name = this.projectName;
							}
							uni.request({
								url: url,
								method: 'GET',
								header: {
									//token:server.net.GetSessionToken(),
									token: this.testToken
								},
								data: JSON.stringify(data),
								success: (data) => {
									let jsondata = data.data;
									if (jsondata.status = 1) {
										console.log("构件类型获取成功");
										this.ConstructList = this.setData(jsondata.data);
										this.ConstructVal = this.ConstructList[this.ConstructIndex].value;
										this.ConstructText = this.ConstructList[this.ConstructIndex].text;
										this.ConstructList2 = this.setData(jsondata.data);
										this.ConstructVal2 = this.ConstructList2[this.ConstructIndex2].value;
										this.ConstructText2 = this.ConstructList2[this.ConstructIndex2].text;
										this.GetActualQuaTermList(); //获取主控项目
									} else {
										console.log("构件类型获取失败" + jsondata.status);
									}
								},
								fail: (data, code) => {
									console.log("构件类型数据请求失败" + data + code)
								}
							});
						},
						GetActualQuaTermList() {
							let url = server.net.setUrl('api/DropDownListApi/GetActualQuaTermList');
							let ajaxdata = {
								comid: this.ConstrutVal
							};
							uni.request({
								url: url,
								method: 'GET',
								header: {
									Token: this.testToken
								},
								data: JSON.stringify(ajaxdata),
								success: res => {
									let jsondata = res.data;
									if (jsondata.status = 1) {
										console.log("主控项目获取成功");
										this.engProjectList = this.setData(jsondata.data);
										this.engProjectVal = this.engProjectList[this.engProjectIndex].value;
										this.engProjectText = this.engProjectList[this.engProjectIndex].text;

									} else {
										console.log("主控项目获取失败" + jsondata.status);
									}
								},
								fail: () => {},
								complete: () => {}
							});
						},
						setData(items) {
							let newItems = [];
							items.forEach((e) => {
								newItems.push({
									text: e.text,
									value: e.value
								});
							});
							return newItems;
						},
						changeArea(e) {
							this.areaIndex = e.detail.value;
							this.areaText = this.areaList[this.areaIndex].text;
							this.areaVal = this.areaList[this.areaIndex].value;
						},
						changeArea2(e) {
							this.areaIndex2 = e.detail.value;
							this.areaText2 = this.areaList2[this.areaIndex2].text;
							this.areaVal2 = this.areaList2[this.areaIndex2].value;
						},
						changeConstruct(e) {
							this.ConstructIndex = e.detail.value;
							this.ConstructVal = this.ConstructList[this.ConstructIndex].value;
							this.ConstructText = this.ConstructList[this.ConstructIndex].text;
							this.GetActualQuaTermList(); //重新获取主控项目
						},
						changeConstruct2(e) {
							this.ConstructIndex2 = e.detail.value;
							this.ConstructVal2 = this.ConstructList2[this.ConstructIndex2].value;
							this.ConstructText2 = this.ConstructList2[this.ConstructIndex2].text;
							this.GetActualQuaTermList(); //重新获取主控项目
						},
						changeEngproject(e) {
							this.engProjectIndex = e.detail.value;
							this.engProjectVal = this.engProjectList[this.engProjectIndex].value;
							this.engProjectText = this.engProjectList[this.engProjectIndex].text;
						},
						addDatas() {
							//this.isAdd = true;
							console.log(this.dataList.length);
							let addTimes = this.dataList.length+1;
							console.log("点击次数" + addTimes);
							if (addTimes < 11) {
								this.dataList.push({
									dataNum: addTimes
								});
								addTimes += 1;
							} else {
								uni.showToast({
									title:'最多添加10条'
								})
								return false;
							}
						}
		}
	}
</script>

<style>
	page {
		display: flex;
	}

	.index {
		display: flex;
		flex: 1;
		flex-direction: column;
		overflow: hidden;
		height: 100%;
	}

	.index-bd {
		width: 750upx;
		height: 100%;
	}

	.swiper-tab {
		width: 100%;
		white-space: nowrap;
		line-height: 60upx;
		height: 65px;
	}


	.swiper-tab-list {
		font-size: 30upx;
		width: 50%;
		display: inline-block;
		text-align: center;
		color: #777777;
	}

	.on {
		color: #17A869;
		border-bottom: 5upx solid #17A869;
	}

	.swiper-box {
		flex: 1;
		width: 100%;
		height: 1030px;
		min-height: 600px;
	}

	.tab-list {
		width: 100%;
		height: 90upx;
		line-height: 90upx;
		text-align: left;
		border-bottom: 2upx solid #EFEFF4;
	}

	.data-row {
		width: 70%;
		display: flex;
		flex-direction: row;
		justify-content: flex-end;
		padding: 15px 0px;
	}

	.data-row button {
		color: #fff;
		background-color: #17A869;
		border: none;
		position: relative;
	}
</style>
